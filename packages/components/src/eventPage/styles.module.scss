@use 'sass:map';
@use '../styles/tokens/breakpoints.module.scss' as breakpoints;
@use '../styles/tokens/spacing.module.scss' as spacing;
@use '../styles/tokens/layout.module.scss' as layout;
@use '../styles/tokens/colors.module.scss' as colors;
@use '../styles/tokens/radius.module.scss' as radius;

$image-width: 100%;
$image-height: calc($image-width * 1.414);
$padding-left-sidebar: map.get(spacing.$rem, 48);
$shadow: 5px 5px 20px 5px rgba(0, 0, 0, 0.1);

.container {
  display: grid;
  grid-template-areas:
    'main'
    'sidebar';
  grid-template-columns: 1fr;

  @media screen and (min-width: breakpoints.$sm) {
    grid-template-columns: 33% 1fr;
    grid-template-areas: 'sidebar main';
  }
}

.noGrid {
  grid-template-areas:
    'main'
    'sidebar';
  grid-template-columns: 1fr;
}

.header {
  grid-area: header;

  background-color: colors.$primary;
  color: colors.$secondary-light;
  padding: map.get(spacing.$rem, 64) 0;

  @media screen and (min-width: breakpoints.$sm) {
    padding: map.get(spacing.$rem, 96) 0;
  }
}

.titleContainer {
  @media screen and (min-width: breakpoints.$sm) {
    text-align: center;
  }
}

.program {
  list-style: none;
  padding: 0;
  margin: 0;
  margin-top: map.get(spacing.$rem, 16);

  @media screen and (min-width: breakpoints.$sm) {
    text-align: center;
  }
}

.programItem {
  color: colors.$background;
}

.programTitle {
  font-weight: bold;
}

.sidebar {
  grid-area: sidebar;
  padding-bottom: map.get(spacing.$rem, layout.$default-mobile-spacing);

  @media screen and (min-width: breakpoints.$sm) {
    padding-bottom: 0;
  }
}

$sidebar-translate: 50px;

.sidebarContent {
  @media screen and (min-width: breakpoints.$sm) {
    position: sticky;
    top: calc(map.get(spacing.$rem, 8) + $sidebar-translate);
    transform: translateY(calc($sidebar-translate * -1));
  }
}

.content {
  grid-area: main;

  @media screen and (min-width: breakpoints.$sm) {
    padding-left: $padding-left-sidebar;
  }
}

.imageContainer {
  border-radius: radius.$md;
  flex-shrink: 0;
  max-width: fit-content;

  @media screen and (min-width: breakpoints.$sm) {
    box-shadow: $shadow;
  }
}

.image {
  width: $image-width;
  height: $image-height;
  max-width: 100%;
  border-radius: inherit;
  object-fit: cover;
}

.persons {
  list-style: none;
  padding: 0;
  margin: 0;
  background-color: colors.$background;
  border-radius: radius.$md;

  @media screen and (min-width: breakpoints.$sm) {
    box-shadow: $shadow;
    padding: map.get(spacing.$rem, 32) map.get(spacing.$rem, 32);
  }
}

.person:not(:last-child) {
  margin-bottom: map.get(spacing.$rem, 16);

  @media screen and (min-width: breakpoints.$sm) {
    margin-bottom: map.get(spacing.$rem, 32);
  }
}

.personTitle {
  text-transform: uppercase;
}

.imageContainer + .persons {
  margin-top: map.get(spacing.$rem, 16);

  @media screen and (min-width: breakpoints.$sm) {
    margin-top: map.get(spacing.$rem, 48);
  }
}

.eventListItem {
  padding-top: map.get(spacing.$rem, layout.$default-mobile-spacing);

  @media screen and (min-width: breakpoints.$sm) {
    padding-left: map.get(spacing.$rem, 24);
    padding-top: map.get(spacing.$rem, layout.$default-desktop-spacing);
  }
}

.root .pageContent {
  padding-top: calc(
    map.get(spacing.$rem, layout.$default-mobile-spacing) - map.get(
        spacing.$rem,
        24
      )
  );

  @media screen and (min-width: breakpoints.$sm) {
    padding-top: calc(
      map.get(spacing.$rem, layout.$default-desktop-spacing) - map.get(
          spacing.$rem,
          32
        )
    );
  }
}

.locations {
  grid-area: footer;
  display: flex;
  flex-direction: column;
  gap: map.get(spacing.$rem, 32);

  @media screen and (min-width: breakpoints.$sm) {
    flex-direction: row;
    gap: 0;
  }
}
