type Address {
  address: String
  city: String
  state: String
}

"""
Specifies how to filter Boolean fields
"""
input BooleanFilter {
  """
  Search for records with an exact match
  """
  eq: BooleanType
}

"""
Represents `true` or `false` values.
"""
scalar BooleanType

type Capsule {
  dragon: Dragon
    @deprecated(
      reason: "This is not available in the REST API after MongoDB has been deprecated"
    )
  id: ID
  landings: Int
  missions: [CapsuleMission]
  original_launch: Date
  reuse_count: Int
  status: String
  type: String
}

type CapsuleMission {
  flight: Int
  name: String
}

input CapsulesFind {
  id: ID
  landings: Int
  mission: String
  original_launch: Date
  reuse_count: Int
  status: String
  type: String
}

type CollectionMetadata {
  count: IntType!
}

enum ColorBucketType {
  red
  orange
  pink
  cyan
  purple
  blue
  yellow
  green
  brown
  grey
  white
  black
}

type ColorField {
  alpha: IntType!
  blue: IntType!
  cssRgb: String!
  green: IntType!
  hex: String!
  red: IntType!
}

"""
Block of type Concert lijst (concert_list)
"""
type ConcertListRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  pinnedConcerts: [ConcertRecord!]!
  showAllConcerts: BooleanType
}

union ConcertModelContentField = TextBlockRecord | TwoColumnRecord

input ConcertModelFilter {
  _createdAt: CreatedAtFilter
  id: ItemIdFilter
  _firstPublishedAt: PublishedAtFilter
  _publicationScheduledAt: PublishedAtFilter
  _unpublishingScheduledAt: PublishedAtFilter
  _publishedAt: PublishedAtFilter
  _status: StatusFilter
  _updatedAt: UpdatedAtFilter
  _isValid: BooleanFilter
  link: LinkFilter
  persons: LinksFilter
  poster: FileFilter
  title: StringFilter
  OR: [ConcertModelFilter]
  AND: [ConcertModelFilter]
}

enum ConcertModelOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  id_ASC
  id_DESC
  _firstPublishedAt_ASC
  _firstPublishedAt_DESC
  _publicationScheduledAt_ASC
  _publicationScheduledAt_DESC
  _unpublishingScheduledAt_ASC
  _unpublishingScheduledAt_DESC
  _publishedAt_ASC
  _publishedAt_DESC
  _status_ASC
  _status_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  _isValid_ASC
  _isValid_DESC
  title_ASC
  title_DESC
}

"""
Record of type Concerten (concert)
"""
type ConcertRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  content: [ConcertModelContentField!]!
  id: ItemId!
  link: LinkRecord
  locations: [LocationItemRecord!]!
  persons: [PersonRecord!]!
  poster: FileField
  title: String!
}

"""
conflict action
"""
enum conflict_action {
  """
  ignore the insert on this row
  """
  ignore

  """
  update the row with the given values
  """
  update
}

type Core {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: ID
  missions: [CapsuleMission]
  original_launch: Date
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

type CoreMission {
  flight: Int
  name: String
}

input CoresFind {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: String
  missions: String
  original_launch: Date
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

"""
Specifies how to filter by creation datetime
"""
input CreatedAtFilter {
  """
  Filter records with a value that's strictly greater than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  gt: DateTime

  """
  Filter records with a value that's less than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  lt: DateTime

  """
  Filter records with a value that's greater than or equal to than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  gte: DateTime

  """
  Filter records with a value that's less or equal than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  lte: DateTime

  """
  Filter records with a value that's within the specified minute range. Seconds and milliseconds are truncated from the argument.
  """
  eq: DateTime

  """
  Filter records with a value that's outside the specified minute range. Seconds and milliseconds are truncated from the argument.
  """
  neq: DateTime

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

scalar CustomData

scalar Date

"""
A ISO 8601 compliant datetime value
"""
scalar DateTime

type Distance {
  feet: Float
  meters: Float
}

type Dragon {
  active: Boolean
  crew_capacity: Int
  description: String
  diameter: Distance
  dry_mass_kg: Int
  dry_mass_lb: Int
  first_flight: String
  heat_shield: DragonHeatShield
  height_w_trunk: Distance
  id: ID
  launch_payload_mass: Mass
  launch_payload_vol: Volume
  name: String
  orbit_duration_yr: Int
  pressurized_capsule: DragonPressurizedCapsule
  return_payload_mass: Mass
  return_payload_vol: Volume
  sidewall_angle_deg: Float
  thrusters: [DragonThrust]
  trunk: DragonTrunk
  type: String
  wikipedia: String
}

type DragonHeatShield {
  dev_partner: String
  material: String
  size_meters: Float
  temp_degrees: Int
}

type DragonPressurizedCapsule {
  payload_volume: Volume
}

type DragonThrust {
  amount: Int
  fuel_1: String
  fuel_2: String
  pods: Int
  thrust: Force
  type: String
}

type DragonTrunk {
  cargo: DragonTrunkCargo
  trunk_volume: Volume
}

type DragonTrunkCargo {
  solar_array: Int
  unpressurized_cargo: Boolean
}

enum FaviconType {
  icon
  appleTouchIcon
  msApplication
}

type FileField implements FileFieldInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _updatedAt: DateTime!
  alt(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): String
  author: String
  basename: String!
  blurUpThumb(
    """
    Controls the "punch" value (~contrast) of the blurhash decoding algorithm (defaults to 1.0)
    """
    punch: Float! = 1

    """
    Maximum image dimension (defaults to 24px)
    """
    size: Int! = 24

    """
    Image quality (defaults to 70%)
    """
    quality: Int! = 70

    """
    Imgix transformations to apply to the image
    """
    imgixParams: ImgixParams
  ): String
  blurhash: String
  colors: [ColorField!]!
  copyright: String
  customData(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): CustomData!
  exifInfo: CustomData!
  filename: String!
  focalPoint(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): focalPoint
  format: String!
  height: IntType
  id: UploadId!
  md5: String!
  mimeType: String!
  notes: String
  responsiveImage(
    """
    Imgix transformations to apply to the image
    """
    imgixParams: ImgixParams

    """
    Specify a custom `sizes` attribute for the image
    """
    sizes: String

    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): ResponsiveImage
  size: IntType!
  smartTags: [String!]!
  tags: [String!]!
  thumbhash: String
  title(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): String
  url(
    """
    Imgix transformations to apply to the image
    """
    imgixParams: ImgixParams
  ): String!
  video: UploadVideoField
  width: IntType
}

interface FileFieldInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _updatedAt: DateTime!
  alt(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): String
  author: String
  basename: String!
  blurUpThumb(
    """
    Controls the "punch" value (~contrast) of the blurhash decoding algorithm (defaults to 1.0)
    """
    punch: Float! = 1

    """
    Maximum image dimension (defaults to 24px)
    """
    size: Int! = 24

    """
    Image quality (defaults to 70%)
    """
    quality: Int! = 70

    """
    Imgix transformations to apply to the image
    """
    imgixParams: ImgixParams
  ): String
  blurhash: String
  colors: [ColorField!]!
  copyright: String
  customData(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): CustomData!
  exifInfo: CustomData!
  filename: String!
  focalPoint(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): focalPoint
  format: String!
  height: IntType
  id: UploadId!
  md5: String!
  mimeType: String!
  notes: String
  responsiveImage(
    """
    Imgix transformations to apply to the image
    """
    imgixParams: ImgixParams

    """
    Specify a custom `sizes` attribute for the image
    """
    sizes: String

    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): ResponsiveImage
  size: IntType!
  smartTags: [String!]!
  tags: [String!]!
  thumbhash: String
  title(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): String
  url(
    """
    Imgix transformations to apply to the image
    """
    imgixParams: ImgixParams
  ): String!
  video: UploadVideoField
  width: IntType
}

"""
Specifies how to filter Single-file/image fields
"""
input FileFilter {
  """
  Search for records with an exact match. The specified value must be an Upload ID
  """
  eq: UploadId

  """
  Exclude records with an exact match. The specified value must be an Upload ID
  """
  neq: UploadId

  """
  Filter records that have one of the specified uploads
  """
  in: [UploadId]

  """
  Filter records that do not have one of the specified uploads
  """
  notIn: [UploadId]

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

"""
Represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar FloatType

type focalPoint {
  x: FloatType!
  y: FloatType!
}

type Force {
  kN: Float
  lbf: Float
}

union GeneralModelMenuField = MenuItemRecord | SubmenuItemRecord

"""
Record of type Algemene info (general)
"""
type GeneralRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  logo: FileField!
  menu: [GeneralModelMenuField!]!
  title: String!
}

type GlobalSeoField {
  facebookPageUrl: String
  fallbackSeo: SeoField
  siteName: String
  titleSuffix: String
  twitterAccount: String
}

type HistoriesResult {
  data: [History]
  result: Result
}

type History {
  details: String
  event_date_unix: Date
  event_date_utc: Date
  flight: Launch
  id: ID
  links: Link
  title: String
}

input HistoryFind {
  end: Date
  flight_number: Int
  id: ID
  start: Date
}

"""
Block of type Afbeelding (image)
"""
type ImageRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  item: MediaItemRecord
}

input ImgixParams {
  """
  Aspect Ratio

  Specifies an aspect ratio to maintain when resizing and cropping the image

  Depends on: `fit=crop`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/ar)
  """
  ar: String

  """
  Automatic

  Applies automatic enhancements to images.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/auto)
  """
  auto: [ImgixParamsAuto!]

  """
  Background Removal

  Removes background from image.

  [Open Imgix reference »](https://docs.imgix.com/apis/rendering/background-removal/bg-remove)
  """
  bgRemove: BooleanType

  """
  Background Color

  Colors the background of padded and partially-transparent images.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/bg)
  """
  bg: String

  """
  Blend Align

  Changes the blend alignment relative to the parent image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-align)
  """
  blendAlign: [ImgixParamsBlendAlign!]

  """
  Blend Alpha

  Changes the alpha of the blend image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-alpha)
  """
  blendAlpha: IntType

  """
  Blend Color

  Specifies a color to use when applying the blend.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-color)
  """
  blendColor: String

  """
  Blend Crop

  Specifies the type of crop for blend images.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-crop)
  """
  blendCrop: [ImgixParamsBlendCrop!]

  """
  Blend Fit

  Specifies the fit mode for blend images.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-fit)
  """
  blendFit: ImgixParamsBlendFit

  """
  Blend Height

  Adjusts the height of the blend image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-h)
  """
  blendH: FloatType

  """
  Blend Mode

  Sets the blend mode for a blend image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-mode)
  """
  blendMode: ImgixParamsBlendMode

  """
  Blend Padding

  Applies padding to the blend image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-pad)
  """
  blendPad: IntType

  """
  Blend Size

  Adjusts the size of the blend image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-size)
  """
  blendSize: ImgixParamsBlendSize

  """
  Blend Width

  Adjusts the width of the blend image.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-w)
  """
  blendW: FloatType

  """
  Blend X Position

  Adjusts the x-offset of the blend image relative to its parent.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-x)
  """
  blendX: IntType

  """
  Blend Y Position

  Adjusts the y-offset of the blend image relative to its parent.

  Depends on: `blend`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend-y)
  """
  blendY: IntType

  """
  Blend

  Specifies the location of the blend image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/blending/blend)
  """
  blend: String

  """
  Gaussian Blur

  Applies a gaussian blur to an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/blur)
  """
  blur: IntType

  """
  Border Bottom

  Sets bottom border of an image.

  Depends on: `border`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border-bottom)
  """
  borderBottom: IntType

  """
  Border Left

  Sets left border of an image.

  Depends on: `border`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border-left)
  """
  borderLeft: IntType

  """
  Inner Border Radius

  Sets the inner radius of the image's border in pixels.

  Depends on: `border`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner)
  """
  borderRadiusInner: String

  """
  Outer Border Radius

  Sets the outer radius of the image's border in pixels.

  Depends on: `border`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border-radius)
  """
  borderRadius: String

  """
  Border Right

  Sets right border of an image.

  Depends on: `border`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border-right)
  """
  borderRight: IntType

  """
  Border Top

  Sets top border of an image.

  Depends on: `border`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border-top)
  """
  borderTop: IntType

  """
  Border Size & Color

  Applies a border to an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/border)
  """
  border: String

  """
  Brightness

  Adjusts the brightness of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/bri)
  """
  bri: IntType

  """
  Client Hints

  Sets one or more Client-Hints headers

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/ch)
  """
  ch: [ImgixParamsCh!]

  """
  Chroma Subsampling

  Specifies the output chroma subsampling rate.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/chromasub)
  """
  chromasub: IntType

  """
  Color Quantization

  Limits the number of unique colors in an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/colorquant)
  """
  colorquant: IntType

  """
  Palette Color Count

  Specifies how many colors to include in a palette-extraction response.

  Depends on: `palette`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/color-palette/colors)
  """
  colors: IntType

  """
  Contrast

  Adjusts the contrast of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/con)
  """
  con: IntType

  """
  Mask Corner Radius

  Specifies the radius value for a rounded corner mask.

  Depends on: `mask=corners`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/mask/corner-radius)
  """
  cornerRadius: String

  """
  Crop Mode

  Specifies how to crop an image.

  Depends on: `fit=crop`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/crop)
  """
  crop: [ImgixParamsCrop!]

  """
  Color Space

  Specifies the color space of the output image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/cs)
  """
  cs: ImgixParamsCs

  """
  Download

  Forces a URL to use send-file in its response.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/dl)
  """
  dl: String

  """
  Dots Per Inch

  Sets the DPI value in the EXIF header.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/dpi)
  """
  dpi: IntType

  """
  Device Pixel Ratio

  Adjusts the device-pixel ratio of the output image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/dpr)
  """
  dpr: FloatType

  """
  Duotone Alpha

  Changes the alpha of the duotone effect atop the source image.

  Depends on: `duotone`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/duotone-alpha)
  """
  duotoneAlpha: IntType

  """
  Duotone

  Applies a duotone effect to the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/duotone)
  """
  duotone: String

  """
  Exposure

  Adjusts the exposure of the output image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/exp)
  """
  exp: IntType

  """
  Url Expiration Timestamp

  A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/expires)
  """
  expires: IntType

  """
  Face Index

  Selects a face to crop to.

  Depends on: `fit=facearea`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/face-detection/faceindex)
  """
  faceindex: IntType

  """
  Face Padding

  Adjusts padding around a selected face.

  Depends on: `fit=facearea`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/face-detection/facepad)
  """
  facepad: FloatType

  """
  Json Face Data

  Specifies that face data should be included in output when combined with `fm=json`.

  Depends on: `fm=json`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/face-detection/faces)
  """
  faces: IntType

  """
  Fill Color

  Sets the fill color for images with additional space created by the fit setting

  Depends on: `fill=solid`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/fill/fill-color)
  """
  fillColor: String

  """
  Fill Mode

  Determines how to fill in additional space created by the fit setting

  Depends on: `fit`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/fill/fill)
  """
  fill: ImgixParamsFill

  """
  Resize Fit Mode

  Specifies how to map the source image to the output image dimensions.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/fit)
  """
  fit: ImgixParamsFit

  """
  Flip Axis

  Flips an image on a specified axis.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/rotation/flip)
  """
  flip: ImgixParamsFlip

  """
  Output Format

  Changes the format of the output image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/fm)
  """
  fm: ImgixParamsFm

  """
  Focal Point Debug

  Displays crosshairs identifying the location of the set focal point

  Depends on: `fit=crop`, `crop=focalpoint`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug)
  """
  fpDebug: BooleanType

  """
  Focal Point X Position

  Sets the relative horizontal value for the focal point of an image

  Depends on: `fit=crop`, `crop=focalpoint`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x)
  """
  fpX: FloatType

  """
  Focal Point Y Position

  Sets the relative vertical value for the focal point of an image

  Depends on: `fit=crop`, `crop=focalpoint`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y)
  """
  fpY: FloatType

  """
  Focal Point Zoom

  Sets the relative zoom value for the focal point of an image

  Depends on: `fit=crop`, `crop=focalpoint`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z)
  """
  fpZ: FloatType

  """
  Frames Per Second

  Specifies the framerate of the generated image.
  """
  fps: IntType

  """
  Frame Selection

  Specifies the frame of an animated image to use.
  """
  frame: String

  """
  Gamma

  Adjusts the gamma of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/gam)
  """
  gam: IntType

  """
  Animated Gif Quality

  Depends on: `fm=gif`
  """
  gifQ: IntType

  """
  Grid Colors

  Sets grid colors for the transparency checkerboard grid.

  Depends on: `transparency`
  """
  gridColors: String

  """
  Grid Size

  Sets grid size for the transparency checkerboard grid.

  Depends on: `transparency`
  """
  gridSize: IntType

  """
  Image Height

  Adjusts the height of the output image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/h)
  """
  h: FloatType

  """
  Highlight

  Adjusts the highlights of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/high)
  """
  high: IntType

  """
  Halftone

  Applies a half-tone effect to the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/htn)
  """
  htn: IntType

  """
  Hue Shift

  Adjusts the hue of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/hue)
  """
  hue: IntType

  """
  Frame Interval

  Displays every Nth frame starting with the first frame.
  """
  interval: IntType

  """
  Invert

  Inverts the colors on the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/invert)
  """
  invert: BooleanType

  """
  Iptc Passthrough

  Determine if IPTC data should be passed for JPEG images.
  """
  iptc: ImgixParamsIptc

  """
  Animation Loop Count

  Specifies the number of times an animated image should repeat. A value of 0 means infinite looping.
  """
  loop: IntType

  """
  Lossless Compression

  Specifies that the output image should be a lossless variant.

  Depends on: `fm=webp`, `fm=jxr`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/lossless)
  """
  lossless: BooleanType

  """
  Watermark Alignment Mode

  Changes the watermark alignment relative to the parent image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-align)
  """
  markAlign: [ImgixParamsMarkAlign!]

  """
  Watermark Alpha

  Changes the alpha of the watermark image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-alpha)
  """
  markAlpha: IntType

  """
  Watermark Base Url

  Changes base URL of the watermark image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-base)
  """
  markBase: String

  """
  Watermark Fit Mode

  Specifies the fit mode for watermark images.

  Depends on: `mark`, `markw`, `markh`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-fit)
  """
  markFit: ImgixParamsMarkFit

  """
  Watermark Height

  Adjusts the height of the watermark image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-h)
  """
  markH: FloatType

  """
  Watermark Padding

  Applies padding to the watermark image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-pad)
  """
  markPad: IntType

  """
  Watermark Rotation

  Rotates a watermark or tiled watermarks by a specified number of degrees.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-rot)
  """
  markRot: FloatType

  """
  Watermark Scale

  Adjusts the scale of the watermark image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-scale)
  """
  markScale: IntType

  """
  Watermark Tile

  Adds tiled watermark.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-tile)
  """
  markTile: ImgixParamsMarkTile

  """
  Watermark Width

  Adjusts the width of the watermark image.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-w)
  """
  markW: FloatType

  """
  Watermark X Position

  Adjusts the x-offset of the watermark image relative to its parent.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-x)
  """
  markX: IntType

  """
  Watermark Y Position

  Adjusts the y-offset of the watermark image relative to its parent.

  Depends on: `mark`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark-y)
  """
  markY: IntType

  """
  Watermark Image Url

  Specifies the location of the watermark image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/watermark/mark)
  """
  mark: String

  """
  Mask Background Color

  Colors the background of the transparent mask area of images

  Depends on: `mask`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/mask/mask-bg)
  """
  maskBg: String

  """
  Mask Type

  Defines the type of mask and specifies the URL if that type is selected.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/mask)
  """
  mask: String

  """
  Maximum Height

  Specifies the maximum height of the output image in pixels.

  Depends on: `fit=crop`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/max-height)
  """
  maxH: IntType

  """
  Maximum Width

  Specifies the maximum width of the output image in pixels.

  Depends on: `fit=crop`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/max-width)
  """
  maxW: IntType

  """
  Minimum Height

  Specifies the minimum height of the output image in pixels.

  Depends on: `fit=crop`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/min-height)
  """
  minH: IntType

  """
  Minimum Width

  Specifies the minimum width of the output image in pixels.

  Depends on: `fit=crop`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/min-width)
  """
  minW: IntType

  """
  Monochrome

  Applies a monochrome effect to the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/monochrome)
  """
  monochrome: String

  """
  Noise Reduction Bound

  Reduces the noise in an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/noise-reduction/nr)
  """
  nr: IntType

  """
  Noise Reduction Sharpen

  Provides a threshold by which to sharpen an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/noise-reduction/nrs)
  """
  nrs: IntType

  """
  Orientation

  Changes the image orientation.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/rotation/orient)
  """
  orient: IntType

  """
  Padding Bottom

  Sets bottom padding of an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom)
  """
  padBottom: IntType

  """
  Padding Left

  Sets left padding of an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/pad-left)
  """
  padLeft: IntType

  """
  Padding Right

  Sets right padding of an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/pad-right)
  """
  padRight: IntType

  """
  Padding Top

  Sets top padding of an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/pad-top)
  """
  padTop: IntType

  """
  Padding

  Pads an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/border-and-padding/pad)
  """
  pad: IntType

  """
  Pdf Page Number

  Selects a page from a PDF for display.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/pdf/page)
  """
  page: IntType

  """
  Color Palette Extraction

  Specifies an output format for palette-extraction.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/color-palette/palette)
  """
  palette: ImgixParamsPalette

  """
  Pdf Annotation

  Enables or disables PDF annotation.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/pdf/pdf-annotation)
  """
  pdfAnnotation: BooleanType

  """
  Css Prefix

  Specifies a CSS prefix for all classes in palette-extraction.

  Depends on: `palette=css`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/color-palette/prefix)
  """
  prefix: String

  """
  Pixellate

  Applies a pixelation effect to an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/px)
  """
  px: IntType

  """
  Output Quality

  Adjusts the quality of an output image.

  Depends on: `fm=jpg`, `fm=pjpg`, `fm=webp`, `fm=jxr`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/format/q)
  """
  q: IntType

  """
  Source Rectangle Region

  Crops an image to a specified rectangle.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/rect)
  """
  rect: String

  """
  Reverse

  Reverses the frame order on the source animation.
  """
  reverse: BooleanType

  """
  Rotation

  Rotates an image by a specified number of degrees.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/rotation/rot)
  """
  rot: FloatType

  """
  Saturation

  Adjusts the saturation of an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/sat)
  """
  sat: IntType

  """
  Sepia Tone

  Applies a sepia effect to an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/stylize/sepia)
  """
  sepia: IntType

  """
  Shadow

  Adjusts the highlights of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/shad)
  """
  shad: FloatType

  """
  Sharpen

  Adjusts the sharpness of the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/sharp)
  """
  sharp: FloatType

  """
  Frame Skip

  Skips every Nth frame starting with the first frame.
  """
  skip: IntType

  """
  Transparency

  Adds checkerboard behind images which support transparency.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/fill/transparency)
  """
  transparency: ImgixParamsTransparency

  """
  Trim Color

  Specifies a trim color on a trim operation.

  Depends on: `trim=color`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/trim/trim-color)
  """
  trimColor: String

  """
  Trim Mean Difference

  Specifies the mean difference on a trim operation.

  Depends on: `trim=auto`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/trim/trim-md)
  """
  trimMd: FloatType

  """
  Trim Padding

  Pads the area of the source image before trimming.

  Depends on: `trim`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/trim/trim-pad)
  """
  trimPad: IntType

  """
  Trim Standard Deviation

  Specifies the standard deviation on a trim operation.

  Depends on: `trim=auto`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/trim/trim-sd)
  """
  trimSd: FloatType

  """
  Trim Tolerance

  Specifies the tolerance on a trim operation.

  Depends on: `trim=color`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/trim/trim-tol)
  """
  trimTol: FloatType

  """
  Trim Image

  Trims the source image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/trim/trim)
  """
  trim: ImgixParamsTrim

  """
  Text Align

  Sets the vertical and horizontal alignment of rendered text relative to the base image.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-align)
  """
  txtAlign: [ImgixParamsTxtAlign!]

  """
  Text Clipping Mode

  Sets the clipping properties of rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-clip)
  """
  txtClip: [ImgixParamsTxtClip!]

  """
  Text Color

  Specifies the color of rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-color)
  """
  txtColor: String

  """
  Text Fit Mode

  Specifies the fit approach for rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-fit)
  """
  txtFit: ImgixParamsTxtFit

  """
  Text Font

  Selects a font for rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-font)
  """
  txtFont: String

  """
  Text Leading

  Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/typesetting/txt-lead)
  """
  txtLead: IntType

  """
  Text Ligatures

  Controls the level of ligature substitution

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-lig)
  """
  txtLig: IntType

  """
  Text Outline Color

  Specifies a text outline color.

  Depends on: `txt`, `txtline`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-line-color)
  """
  txtLineColor: String

  """
  Text Outline

  Outlines the rendered text with a specified color.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-line)
  """
  txtLine: IntType

  """
  Text Padding

  Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-pad)
  """
  txtPad: IntType

  """
  Text Shadow

  Applies a shadow to rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-shad)
  """
  txtShad: FloatType

  """
  Text Font Size

  Sets the font size of rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-size)
  """
  txtSize: IntType

  """
  Text Tracking

  Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/typesetting/txt-track)
  """
  txtTrack: IntType

  """
  Text Width

  Sets the width of rendered text.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-width)
  """
  txtWidth: IntType

  """
  Text X Position

  Sets the horizontal (x) position of the text in pixels relative to the left edge of the base image.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-x)
  """
  txtX: IntType

  """
  Text Y Position

  Sets the vertical (y) position of the text in pixels relative to the top edge of the base image.

  Depends on: `txt`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt-y)
  """
  txtY: IntType

  """
  Text String

  Sets the text string to render.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/text/txt)
  """
  txt: String

  """
  Unsharp Mask

  Sharpens the source image using an unsharp mask.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/usm)
  """
  usm: IntType

  """
  Unsharp Mask Radius

  Specifies the radius for an unsharp mask operation.

  Depends on: `usm`

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/usmrad)
  """
  usmrad: FloatType

  """
  Vibrance

  Adjusts the vibrance of an image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/adjustment/vib)
  """
  vib: IntType

  """
  Image Width

  Adjusts the width of the output image.

  [Open Imgix reference »](https://docs.imgix.com/apis/url/size/w)
  """
  w: FloatType
}

enum ImgixParamsAuto {
  enhance
  format
  redeye
  compress
}

enum ImgixParamsBlendAlign {
  top
  bottom
  middle
  left
  right
  center
}

enum ImgixParamsBlendCrop {
  top
  bottom
  left
  right
  faces
}

enum ImgixParamsBlendFit {
  clamp
  clip
  crop
  scale
  max
}

enum ImgixParamsBlendMode {
  color
  burn
  dodge
  darken
  difference
  exclusion
  hardlight
  hue
  lighten
  luminosity
  multiply
  overlay
  saturation
  screen
  softlight
  normal
}

enum ImgixParamsBlendSize {
  inherit
}

enum ImgixParamsCh {
  width
  dpr
  saveData
}

enum ImgixParamsCrop {
  top
  bottom
  left
  right
  faces
  entropy
  edges
  focalpoint
}

enum ImgixParamsCs {
  srgb
  adobergb1998
  tinysrgb
  strip
}

enum ImgixParamsFill {
  solid
  blur
}

enum ImgixParamsFit {
  clamp
  clip
  crop
  facearea
  fill
  fillmax
  max
  min
  scale
}

enum ImgixParamsFlip {
  h
  v
  hv
}

enum ImgixParamsFm {
  gif
  jpg
  jp2
  json
  jxr
  pjpg
  mp4
  png
  png8
  png32
  webp
  webm
  blurhash
  avif
}

enum ImgixParamsIptc {
  allow
  block
}

enum ImgixParamsMarkAlign {
  top
  middle
  bottom
  left
  center
  right
}

enum ImgixParamsMarkFit {
  clip
  crop
  fill
  max
  scale
}

enum ImgixParamsMarkTile {
  grid
}

enum ImgixParamsPalette {
  css
  json
}

enum ImgixParamsTransparency {
  grid
}

enum ImgixParamsTrim {
  auto
  color
}

enum ImgixParamsTxtAlign {
  top
  middle
  bottom
  left
  center
  right
}

enum ImgixParamsTxtClip {
  start
  middle
  end
  ellipsis
}

enum ImgixParamsTxtFit {
  max
}

type Info {
  ceo: String
  coo: String
  cto: String
  cto_propulsion: String
  employees: Int
  founded: Int
  founder: String
  headquarters: Address
  launch_sites: Int
  links: InfoLinks
  name: String
  summary: String
  test_sites: Int
  valuation: Float
  vehicles: Int
}

type InfoLinks {
  elon_twitter: String
  flickr: String
  twitter: String
  website: String
}

"""
Represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar IntType

"""
Specifies how to filter by usage
"""
input InUseFilter {
  """
  Search uploads that are currently used by some record or not
  """
  eq: BooleanType
}

scalar ItemId

"""
Specifies how to filter by ID
"""
input ItemIdFilter {
  """
  Search the record with the specified ID
  """
  eq: ItemId

  """
  Exclude the record with the specified ID
  """
  neq: ItemId

  """
  Search records with the specified IDs
  """
  in: [ItemId]

  """
  Search records that do not have the specified IDs
  """
  notIn: [ItemId]
}

enum ItemStatus {
  draft
  updated
  published
}

scalar JsonField

type Landpad {
  attempted_landings: String
  details: String
  full_name: String
  id: ID
  landing_type: String
  location: Location
  status: String
  successful_landings: String
  wikipedia: String
}

type LatLonField {
  latitude: FloatType!
  longitude: FloatType!
}

"""
Specifies how to filter Geolocation fields
"""
input LatLonFilter {
  """
  Filter records within the specified radius in meters
  """
  near: LatLonNearFilter

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

input LatLonNearFilter {
  latitude: FloatType!
  longitude: FloatType!
  radius: FloatType!
}

type Launch {
  details: String
  id: ID
  is_tentative: Boolean
  launch_date_local: Date
  launch_date_unix: Date
  launch_date_utc: Date
  launch_site: LaunchSite
  launch_success: Boolean
  launch_year: String
  links: LaunchLinks
  mission_id: [String]
  mission_name: String
  rocket: LaunchRocket
  ships: [Ship]
  static_fire_date_unix: Date
  static_fire_date_utc: Date
  telemetry: LaunchTelemetry
  tentative_max_precision: String
  upcoming: Boolean
}

type LaunchesPastResult {
  data: [Launch]
  result: Result
}

input LaunchFind {
  apoapsis_km: Float
  block: Int
  cap_serial: String
  capsule_reuse: String
  core_flight: Int
  core_reuse: String
  core_serial: String
  customer: String
  eccentricity: Float
  end: Date
  epoch: Date
  fairings_recovered: String
  fairings_recovery_attempt: String
  fairings_reuse: String
  fairings_reused: String
  fairings_ship: String
  gridfins: String
  id: ID
  inclination_deg: Float
  land_success: String
  landing_intent: String
  landing_type: String
  landing_vehicle: String
  launch_date_local: Date
  launch_date_utc: Date
  launch_success: String
  launch_year: String
  legs: String
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  mission_id: String
  mission_name: String
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: String
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: String
  rocket_id: String
  rocket_name: String
  rocket_type: String
  second_stage_block: String
  semi_major_axis_km: Float
  ship: String
  side_core1_reuse: String
  side_core2_reuse: String
  site_id: String
  site_name_long: String
  site_name: String
  start: Date
  tbd: String
  tentative_max_precision: String
  tentative: String
}

type LaunchLinks {
  article_link: String
  flickr_images: [String]
  mission_patch: String
  mission_patch_small: String
  presskit: String
  reddit_campaign: String
  reddit_launch: String
  reddit_media: String
  reddit_recovery: String
  video_link: String
  wikipedia: String
}

type Launchpad {
  attempted_launches: Int
  details: String
  id: ID
  location: Location
  name: String
  status: String
  successful_launches: Int
  vehicles_launched: [Rocket]
  wikipedia: String
}

type LaunchRocket {
  fairings: LaunchRocketFairings
  first_stage: LaunchRocketFirstStage
  rocket: Rocket
  rocket_name: String
  rocket_type: String
  second_stage: LaunchRocketSecondStage
}

type LaunchRocketFairings {
  recovered: Boolean
  recovery_attempt: Boolean
  reused: Boolean
  ship: String
}

type LaunchRocketFirstStage {
  cores: [LaunchRocketFirstStageCore]
}

type LaunchRocketFirstStageCore {
  block: Int
  core: Core
  flight: Int
  gridfins: Boolean
  land_success: Boolean
  landing_intent: Boolean
  landing_type: String
  landing_vehicle: String
  legs: Boolean
  reused: Boolean
}

type LaunchRocketSecondStage {
  block: Int
  payloads: [Payload]
}

type LaunchSite {
  site_id: String
  site_name: String
  site_name_long: String
}

type LaunchTelemetry {
  flight_club: String
}

type Link {
  article: String
  reddit: String
  wikipedia: String
}

"""
Specifies how to filter Single-link fields
"""
input LinkFilter {
  """
  Search for records with an exact match. The specified value must be a Record ID
  """
  eq: ItemId

  """
  Exclude records with an exact match. The specified value must be a Record ID
  """
  neq: ItemId

  """
  Filter records linked to one of the specified records
  """
  in: [ItemId]

  """
  Filter records not linked to one of the specified records
  """
  notIn: [ItemId]

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

input LinkModelFilter {
  _createdAt: CreatedAtFilter
  id: ItemIdFilter
  _firstPublishedAt: PublishedAtFilter
  _publicationScheduledAt: PublishedAtFilter
  _unpublishingScheduledAt: PublishedAtFilter
  _publishedAt: PublishedAtFilter
  _status: StatusFilter
  _updatedAt: UpdatedAtFilter
  _isValid: BooleanFilter
  externalUrl: StringFilter
  internalTitle: StringFilter
  page: LinkFilter
  OR: [LinkModelFilter]
  AND: [LinkModelFilter]
}

enum LinkModelOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  id_ASC
  id_DESC
  _firstPublishedAt_ASC
  _firstPublishedAt_DESC
  _publicationScheduledAt_ASC
  _publicationScheduledAt_DESC
  _unpublishingScheduledAt_ASC
  _unpublishingScheduledAt_DESC
  _publishedAt_ASC
  _publishedAt_DESC
  _status_ASC
  _status_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  _isValid_ASC
  _isValid_DESC
  externalUrl_ASC
  externalUrl_DESC
  internalTitle_ASC
  internalTitle_DESC
}

"""
Record of type Links (link)
"""
type LinkRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  externalUrl: String
  id: ItemId!
  internalTitle: String!
  page: PageRecord
}

"""
Specifies how to filter Multiple-links fields
"""
input LinksFilter {
  """
  Search for records with an exact match. The specified values must be Record IDs
  """
  eq: [ItemId]

  """
  Filter records linked to all of the specified records. The specified values must be Record IDs
  """
  allIn: [ItemId]

  """
  Filter records linked to at least one of the specified records. The specified values must be Record IDs
  """
  anyIn: [ItemId]

  """
  Filter records not linked to any of the specified records. The specified values must be Record IDs
  """
  notIn: [ItemId]

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

type Location {
  latitude: Float
  longitude: Float
  name: String
  region: String
}

"""
Block of type Locatie item (location_item)
"""
type LocationItemRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  dateTime: DateTime!
  id: ItemId!
  location: LocationRecord
}

input LocationModelFilter {
  _createdAt: CreatedAtFilter
  id: ItemIdFilter
  _firstPublishedAt: PublishedAtFilter
  _publicationScheduledAt: PublishedAtFilter
  _unpublishingScheduledAt: PublishedAtFilter
  _publishedAt: PublishedAtFilter
  _status: StatusFilter
  _updatedAt: UpdatedAtFilter
  _isValid: BooleanFilter
  address: LatLonFilter
  addressTitle: StringFilter
  title: StringFilter
  OR: [LocationModelFilter]
  AND: [LocationModelFilter]
}

enum LocationModelOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  id_ASC
  id_DESC
  _firstPublishedAt_ASC
  _firstPublishedAt_DESC
  _publicationScheduledAt_ASC
  _publicationScheduledAt_DESC
  _unpublishingScheduledAt_ASC
  _unpublishingScheduledAt_DESC
  _publishedAt_ASC
  _publishedAt_DESC
  _status_ASC
  _status_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  _isValid_ASC
  _isValid_DESC
  addressTitle_ASC
  addressTitle_DESC
  title_ASC
  title_DESC
}

"""
Record of type Locaties (location)
"""
type LocationRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  address: LatLonField
  addressTitle: String!
  id: ItemId!
  title: String!
}

type Mass {
  kg: Int
  lb: Int
}

input MediaItemModelFilter {
  _createdAt: CreatedAtFilter
  id: ItemIdFilter
  _firstPublishedAt: PublishedAtFilter
  _publicationScheduledAt: PublishedAtFilter
  _unpublishingScheduledAt: PublishedAtFilter
  _publishedAt: PublishedAtFilter
  _status: StatusFilter
  _updatedAt: UpdatedAtFilter
  _isValid: BooleanFilter
  item: FileFilter
  itemUrl: StringFilter
  title: StringFilter
  OR: [MediaItemModelFilter]
  AND: [MediaItemModelFilter]
}

enum MediaItemModelOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  id_ASC
  id_DESC
  _firstPublishedAt_ASC
  _firstPublishedAt_DESC
  _publicationScheduledAt_ASC
  _publicationScheduledAt_DESC
  _unpublishingScheduledAt_ASC
  _unpublishingScheduledAt_DESC
  _publishedAt_ASC
  _publishedAt_DESC
  _status_ASC
  _status_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  _isValid_ASC
  _isValid_DESC
  itemUrl_ASC
  itemUrl_DESC
  title_ASC
  title_DESC
}

"""
Record of type Media item (media_item)
"""
type MediaItemRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  item: FileField
  itemUrl: String
  title: String!
}

"""
Block of type Menu item (menu_item)
"""
type MenuItemRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  label: String!
  link: PageRecord
}

scalar MetaTagAttributes

type Mission {
  description: String
  id: ID
  manufacturers: [String]
  name: String
  payloads: [Payload]
  twitter: String
  website: String
  wikipedia: String
}

type MissionResult {
  data: [Mission]
  result: Result
}

input MissionsFind {
  id: ID
  manufacturer: String
  name: String
  payload_id: String
}

type Mutation {
  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  update data of the table: "users"
  """
  update_users(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response
}

enum MuxThumbnailFormatType {
  jpg
  png
  gif
}

scalar ObjectID

"""
column ordering options
"""
enum order_by {
  """
  in the ascending order, nulls last
  """
  asc

  """
  in the ascending order, nulls first
  """
  asc_nulls_first

  """
  in the ascending order, nulls last
  """
  asc_nulls_last

  """
  in the descending order, nulls first
  """
  desc

  """
  in the descending order, nulls first
  """
  desc_nulls_first

  """
  in the descending order, nulls last
  """
  desc_nulls_last
}

"""
Specifies how to filter by image orientation
"""
input OrientationFilter {
  """
  Search uploads with the specified orientation
  """
  eq: UploadOrientation

  """
  Exclude uploads with the specified orientation
  """
  neq: UploadOrientation
}

union PageModelContentField =
    ConcertListRecord
  | TextBlockRecord
  | TwoColumnRecord

input PageModelFilter {
  _createdAt: CreatedAtFilter
  id: ItemIdFilter
  _firstPublishedAt: PublishedAtFilter
  _publicationScheduledAt: PublishedAtFilter
  _unpublishingScheduledAt: PublishedAtFilter
  _publishedAt: PublishedAtFilter
  _status: StatusFilter
  _updatedAt: UpdatedAtFilter
  _isValid: BooleanFilter
  seo: SeoFilter
  slug: SlugFilter
  title: StringFilter
  OR: [PageModelFilter]
  AND: [PageModelFilter]
}

enum PageModelOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  id_ASC
  id_DESC
  _firstPublishedAt_ASC
  _firstPublishedAt_DESC
  _publicationScheduledAt_ASC
  _publicationScheduledAt_DESC
  _unpublishingScheduledAt_ASC
  _unpublishingScheduledAt_DESC
  _publishedAt_ASC
  _publishedAt_DESC
  _status_ASC
  _status_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  _isValid_ASC
  _isValid_DESC
  title_ASC
  title_DESC
}

"""
Record of type Pagina's (page)
"""
type PageRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  content: [PageModelContentField!]!
  id: ItemId!
  seo: SeoField
  slug: String!
  title: String!
}

type Payload {
  customers: [String]
  id: ID
  manufacturer: String
  nationality: String
  norad_id: [Int]
  orbit: String
  orbit_params: PayloadOrbitParams
  payload_mass_kg: Float
  payload_mass_lbs: Float
  payload_type: String
  reused: Boolean
}

type PayloadOrbitParams {
  apoapsis_km: Float
  arg_of_pericenter: Float
  eccentricity: Float
  epoch: Date
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  mean_anomaly: Float
  mean_motion: Float
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  semi_major_axis_km: Float
}

input PayloadsFind {
  apoapsis_km: Float
  customer: String
  eccentricity: Float
  epoch: Date
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: ID
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: Boolean
  semi_major_axis_km: Float
}

input PersonModelFilter {
  _createdAt: CreatedAtFilter
  id: ItemIdFilter
  _firstPublishedAt: PublishedAtFilter
  _publicationScheduledAt: PublishedAtFilter
  _unpublishingScheduledAt: PublishedAtFilter
  _publishedAt: PublishedAtFilter
  _status: StatusFilter
  _updatedAt: UpdatedAtFilter
  _isValid: BooleanFilter
  name: StringFilter
  role: StringFilter
  OR: [PersonModelFilter]
  AND: [PersonModelFilter]
}

enum PersonModelOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  id_ASC
  id_DESC
  _firstPublishedAt_ASC
  _firstPublishedAt_DESC
  _publicationScheduledAt_ASC
  _publicationScheduledAt_DESC
  _unpublishingScheduledAt_ASC
  _unpublishingScheduledAt_DESC
  _publishedAt_ASC
  _publishedAt_DESC
  _status_ASC
  _status_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  _isValid_ASC
  _isValid_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
}

"""
Record of type Personen (person)
"""
type PersonRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  name: String!
  role: String!
}

"""
Specifies how to filter by publication datetime
"""
input PublishedAtFilter {
  """
  Filter records with a value that's strictly greater than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  gt: DateTime

  """
  Filter records with a value that's less than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  lt: DateTime

  """
  Filter records with a value that's greater than or equal to than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  gte: DateTime

  """
  Filter records with a value that's less or equal than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  lte: DateTime

  """
  Filter records with a value that's within the specified minute range. Seconds and milliseconds are truncated from the argument.
  """
  eq: DateTime

  """
  Filter records with a value that's outside the specified minute range. Seconds and milliseconds are truncated from the argument.
  """
  neq: DateTime

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

"""
The query root for this schema
"""
type Query {
  """
  Returns meta information regarding a record collection
  """
  _allConcertsMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: ConcertModelFilter
  ): CollectionMetadata!

  """
  Returns meta information regarding a record collection
  """
  _allLinksMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: LinkModelFilter
  ): CollectionMetadata!

  """
  Returns meta information regarding a record collection
  """
  _allLocationsMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: LocationModelFilter
  ): CollectionMetadata!

  """
  Returns meta information regarding a record collection
  """
  _allMediaItemsMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: MediaItemModelFilter
  ): CollectionMetadata!

  """
  Returns meta information regarding a record collection
  """
  _allPagesMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: PageModelFilter
  ): CollectionMetadata!

  """
  Returns meta information regarding a record collection
  """
  _allPeopleMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: PersonModelFilter
  ): CollectionMetadata!

  """
  Returns meta information regarding an assets collection
  """
  _allUploadsMeta(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
    filter: UploadFilter
  ): CollectionMetadata!

  """
  Returns the single instance record
  """
  _site(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): Site!

  """
  Returns a collection of records
  """
  allConcerts(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: ConcertModelFilter
    orderBy: [ConcertModelOrderBy] = [_updatedAt_DESC]
  ): [ConcertRecord!]!

  """
  Returns a collection of records
  """
  allLinks(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: LinkModelFilter
    orderBy: [LinkModelOrderBy] = [_updatedAt_DESC]
  ): [LinkRecord!]!

  """
  Returns a collection of records
  """
  allLocations(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: LocationModelFilter
    orderBy: [LocationModelOrderBy] = [_updatedAt_DESC]
  ): [LocationRecord!]!

  """
  Returns a collection of records
  """
  allMediaItems(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: MediaItemModelFilter
    orderBy: [MediaItemModelOrderBy] = [_updatedAt_DESC]
  ): [MediaItemRecord!]!

  """
  Returns a collection of records
  """
  allPages(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: PageModelFilter
    orderBy: [PageModelOrderBy] = [_updatedAt_DESC]
  ): [PageRecord!]!

  """
  Returns a collection of records
  """
  allPeople(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: PersonModelFilter
    orderBy: [PersonModelOrderBy] = [_updatedAt_DESC]
  ): [PersonRecord!]!

  """
  Returns a collection of assets
  """
  allUploads(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]

    """
    Skip the first results
    """
    skip: IntType

    """
    Limit the number of results
    """
    first: IntType = 20
    filter: UploadFilter
    orderBy: [UploadOrderBy] = [_createdAt_DESC]
  ): [FileField!]!

  """
  Returns a specific record
  """
  concert(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: ConcertModelFilter
    orderBy: [ConcertModelOrderBy] = [_updatedAt_DESC]
  ): ConcertRecord

  """
  Returns the single instance record
  """
  general(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): GeneralRecord

  """
  Returns a specific record
  """
  link(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: LinkModelFilter
    orderBy: [LinkModelOrderBy] = [_updatedAt_DESC]
  ): LinkRecord

  """
  Returns a specific record
  """
  location(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: LocationModelFilter
    orderBy: [LocationModelOrderBy] = [_updatedAt_DESC]
  ): LocationRecord

  """
  Returns a specific record
  """
  mediaItem(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: MediaItemModelFilter
    orderBy: [MediaItemModelOrderBy] = [_updatedAt_DESC]
  ): MediaItemRecord

  """
  Returns a specific record
  """
  page(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: PageModelFilter
    orderBy: [PageModelOrderBy] = [_updatedAt_DESC]
  ): PageRecord

  """
  Returns a specific record
  """
  person(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: PersonModelFilter
    orderBy: [PersonModelOrderBy] = [_updatedAt_DESC]
  ): PersonRecord

  """
  Returns a specific asset
  """
  upload(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
    filter: UploadFilter
    orderBy: [UploadOrderBy] = [_createdAt_DESC]
  ): FileField
  capsule(id: ID!): Capsule
  capsules(
    find: CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Capsule]
  capsulesPast(
    find: CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Capsule]
  capsulesUpcoming(
    find: CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Capsule]
  company: Info
  core(id: ID!): Core
  cores(
    find: CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Core]
  coresPast(
    find: CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Core]
  coresUpcoming(
    find: CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Core]
  dragon(id: ID!): Dragon
  dragons(limit: Int, offset: Int): [Dragon]
  histories(
    find: HistoryFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [History]
  historiesResult(
    find: HistoryFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): HistoriesResult
  history(id: ID!): History
  landpad(id: ID!): Landpad
  landpads(limit: Int, offset: Int): [Landpad]
  launch(id: ID!): Launch
  launchLatest(offset: Int): Launch
  launchNext(offset: Int): Launch
  launches(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Launch]
  launchesPast(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Launch]
  launchesPastResult(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): LaunchesPastResult
  launchesUpcoming(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Launch]
  launchpad(id: ID!): Launchpad
  launchpads(limit: Int, offset: Int): [Launchpad]
  mission(id: ID!): Mission
    @deprecated(
      reason: "Mission is not available on REST API after MongoDB deprecation"
    )
  missions(find: MissionsFind, limit: Int, offset: Int): [Mission]
    @deprecated(
      reason: "Mission is not available on REST API after MongoDB deprecation"
    )
  missionsResult(find: MissionsFind, limit: Int, offset: Int): MissionResult
    @deprecated(
      reason: "Mission is not available on REST API after MongoDB deprecation"
    )
  payload(id: ID!): Payload
  payloads(
    find: PayloadsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Payload]
  roadster: Roadster
  rocket(id: ID!): Rocket
  rockets(limit: Int, offset: Int): [Rocket]
  rocketsResult(limit: Int, offset: Int): RocketsResult
  ship(id: ID!): Ship
  ships(
    find: ShipsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Ship]
  shipsResult(
    find: ShipsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): ShipsResult

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the nuber of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the nuber of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users
}

interface RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
}

"""
Specifies how to filter by upload type
"""
input ResolutionFilter {
  """
  Search uploads with the specified resolution
  """
  eq: ResolutionType

  """
  Exclude uploads with the specified resolution
  """
  neq: ResolutionType

  """
  Search uploads with the specified resolutions
  """
  in: [ResolutionType]

  """
  Search uploads without the specified resolutions
  """
  notIn: [ResolutionType]
}

enum ResolutionType {
  icon
  small
  medium
  large
}

type ResponsiveImage {
  alt: String
  aspectRatio: FloatType!
  base64: String
  bgColor: String
  height: IntType!
  sizes: String!
  src: String!
  srcSet: String!
  title: String
  webpSrcSet: String!
  width: IntType!
}

type Result {
  totalCount: Int
}

type Roadster {
  apoapsis_au: Float
  details: String
  earth_distance_km: Float
  earth_distance_mi: Float
  eccentricity: Float
  epoch_jd: Float
  inclination: Float
  launch_date_unix: Date
  launch_date_utc: Date
  launch_mass_kg: Int
  launch_mass_lbs: Int
  longitude: Float
  mars_distance_km: Float
  mars_distance_mi: Float
  name: String
  norad_id: Int
  orbit_type: Float
  periapsis_arg: Float
  periapsis_au: Float
  period_days: Float
  semi_major_axis_au: Float
  speed_kph: Float
  speed_mph: Float
  wikipedia: String
}

type Rocket {
  active: Boolean
  boosters: Int
  company: String
  cost_per_launch: Int
  country: String
  description: String
  diameter: Distance
  engines: RocketEngines
  first_flight: Date
  first_stage: RocketFirstStage
  height: Distance
  id: ID
  landing_legs: RocketLandingLegs
  mass: Mass
  name: String
  payload_weights: [RocketPayloadWeight]
  second_stage: RocketSecondStage
  stages: Int
  success_rate_pct: Int
  type: String
  wikipedia: String
}

type RocketEngines {
  engine_loss_max: String
  layout: String
  number: Int
  propellant_1: String
  propellant_2: String
  thrust_sea_level: Force
  thrust_to_weight: Float
  thrust_vacuum: Force
  type: String
  version: String
}

type RocketFirstStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  reusable: Boolean
  thrust_sea_level: Force
  thrust_vacuum: Force
}

type RocketLandingLegs {
  material: String
  number: Int
}

type RocketPayloadWeight {
  id: String
  kg: Int
  lb: Int
  name: String
}

type RocketSecondStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  payloads: RocketSecondStagePayloads
  thrust: Force
}

type RocketSecondStagePayloadCompositeFairing {
  diameter: Distance
  height: Distance
}

type RocketSecondStagePayloads {
  composite_fairing: RocketSecondStagePayloadCompositeFairing
  option_1: String
}

type RocketsResult {
  data: [Rocket]
  result: Result
}

type SeoField {
  description: String
  image: FileField
  title: String
  twitterCard: String
}

"""
Specifies how to filter SEO meta tags fields
"""
input SeoFilter {
  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

type Ship {
  abs: Int
  active: Boolean
  attempted_landings: Int
  class: Int
  course_deg: Int
  home_port: String
  id: ID
  image: String
  imo: Int
  missions: [ShipMission]
  mmsi: Int
  model: String
  name: String
  position: ShipLocation
  roles: [String]
  speed_kn: Float
  status: String
  successful_landings: Int
  type: String
  url: String
  weight_kg: Int
  weight_lbs: Int
  year_built: Int
}

type ShipLocation {
  latitude: Float
  longitude: Float
}

type ShipMission {
  flight: String
  name: String
}

input ShipsFind {
  id: ID
  name: String
  model: String
  type: String
  role: String
  active: Boolean
  imo: Int
  mmsi: Int
  abs: Int
  class: Int
  weight_lbs: Int
  weight_kg: Int
  year_built: Int
  home_port: String
  status: String
  speed_kn: Int
  course_deg: Int
  latitude: Float
  longitude: Float
  successful_landings: Int
  attempted_landings: Int
  mission: String
}

type ShipsResult {
  data: [Ship]
  result: Result
}

type Site {
  favicon: FileField
  faviconMetaTags(
    """
    The variants to build
    """
    variants: [FaviconType] = [icon]
  ): [Tag!]!
  globalSeo(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale

    """
    If you want to fallback to a default translation when a translation has not been found
    """
    fallbackLocales: [SiteLocale!]
  ): GlobalSeoField
  locales: [SiteLocale!]!
}

enum SiteLocale {
  en
  nl_NL
}

"""
Specifies how to filter Slug fields
"""
input SlugFilter {
  """
  Search for records with an exact match
  """
  eq: String

  """
  Exclude records with an exact match
  """
  neq: String

  """
  Filter records that have one of the specified slugs
  """
  in: [String]

  """
  Filter records that do have one of the specified slugs
  """
  notIn: [String]
}

"""
Specifies how to filter by status
"""
input StatusFilter {
  """
  Search the record with the specified status
  """
  eq: ItemStatus

  """
  Exclude the record with the specified status
  """
  neq: ItemStatus

  """
  Search records with the specified statuses
  """
  in: [ItemStatus]

  """
  Search records without the specified statuses
  """
  notIn: [ItemStatus]
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
Specifies how to filter Single-line string fields
"""
input StringFilter {
  """
  Filter records based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude records based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Filter records with the specified field set as blank (null or empty string)
  """
  isBlank: BooleanType

  """
  Filter records with the specified field present (neither null, nor empty string)
  """
  isPresent: BooleanType

  """
  Search for records with an exact match
  """
  eq: String

  """
  Exclude records with an exact match
  """
  neq: String

  """
  Filter records that equal one of the specified values
  """
  in: [String]

  """
  Filter records that do not equal one of the specified values
  """
  notIn: [String]

  """
  Filter records with the specified field defined (i.e. with any value) or not [DEPRECATED]
  """
  exists: BooleanType
}

input StringMatchesFilter {
  pattern: String!
  caseSensitive: BooleanType = false
  regexp: BooleanType = true
}

"""
Block of type Submenu item (submenu_item)
"""
type SubmenuItemRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  label: String!
  menu: [MenuItemRecord!]!
}

type Subscription {
  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the nuber of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the nuber of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users
}

type Tag {
  attributes: MetaTagAttributes
  content: String
  tag: String!
}

union TextBlockModelContentBlocksField =
    ConcertListRecord
  | ImageRecord
  | VideoRecord

type TextBlockModelContentField {
  blocks: [TextBlockModelContentBlocksField!]!
  links: [PageRecord!]!
  value: JsonField!
}

"""
Block of type Tekst blok (text_block)
"""
type TextBlockRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  content: TextBlockModelContentField
  id: ItemId!
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

union TwoColumnModelLeftContentBlocksField =
    ConcertListRecord
  | ImageRecord
  | VideoRecord

type TwoColumnModelLeftContentField {
  blocks: [TwoColumnModelLeftContentBlocksField!]!
  links: [PageRecord!]!
  value: JsonField!
}

union TwoColumnModelRightContentBlocksField =
    ConcertListRecord
  | ImageRecord
  | VideoRecord

type TwoColumnModelRightContentField {
  blocks: [TwoColumnModelRightContentBlocksField!]!
  links: [PageRecord!]!
  value: JsonField!
}

"""
Block of type Two kolommen tekst blok (two_column)
"""
type TwoColumnRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  leftContent: TwoColumnModelLeftContentField
  rightContent: TwoColumnModelRightContentField
}

"""
Specifies how to filter by upload type
"""
input TypeFilter {
  """
  Search uploads with the specified type
  """
  eq: UploadType

  """
  Exclude uploads with the specified type
  """
  neq: UploadType

  """
  Search uploads with the specified types
  """
  in: [UploadType]

  """
  Search uploads without the specified types
  """
  notIn: [UploadType]
}

"""
Specifies how to filter by update datetime
"""
input UpdatedAtFilter {
  """
  Filter records with a value that's strictly greater than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  gt: DateTime

  """
  Filter records with a value that's less than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  lt: DateTime

  """
  Filter records with a value that's greater than or equal to than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  gte: DateTime

  """
  Filter records with a value that's less or equal than the one specified. Seconds and milliseconds are truncated from the argument.
  """
  lte: DateTime

  """
  Filter records with a value that's within the specified minute range. Seconds and milliseconds are truncated from the argument.
  """
  eq: DateTime

  """
  Filter records with a value that's outside the specified minute range. Seconds and milliseconds are truncated from the argument.
  """
  neq: DateTime

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

"""
Specifies how to filter by default alt
"""
input UploadAltFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Search the uploads with the specified alt
  """
  eq: String

  """
  Exclude the uploads with the specified alt
  """
  neq: String

  """
  Search uploads with the specified values as default alt
  """
  in: [String]

  """
  Search uploads that do not have the specified values as default alt
  """
  notIn: [String]

  """
  Filter uploads with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

"""
Specifies how to filter by auhtor
"""
input UploadAuthorFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Filter uploads with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

"""
Specifies how to filter by basename
"""
input UploadBasenameFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter
}

"""
Specifies how to filter by colors
"""
input UploadColorsFilter {
  """
  Filter uploads that have the specified colors
  """
  contains: ColorBucketType

  """
  Filter uploads that have all of the specified colors
  """
  allIn: [ColorBucketType]

  """
  Filter uploads that have at least one of the specified colors
  """
  anyIn: [ColorBucketType]

  """
  Filter uploads that do not have any of the specified colors
  """
  notIn: [ColorBucketType]

  """
  Search for uploads with an exact match
  """
  eq: [ColorBucketType]
}

"""
Specifies how to filter by copyright
"""
input UploadCopyrightFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

"""
Specifies how to filter by creation datetime
"""
input UploadCreatedAtFilter {
  """
  Search for uploads with an exact match
  """
  eq: DateTime

  """
  Exclude uploads with an exact match
  """
  neq: DateTime

  """
  Filter uploads with a value that's less than the one specified
  """
  lt: DateTime

  """
  Filter uploads with a value that's less or equal than the one specified
  """
  lte: DateTime

  """
  Filter uploads with a value that's strictly greater than the one specified
  """
  gt: DateTime

  """
  Filter uploads with a value that's greater than or equal to the one specified
  """
  gte: DateTime
}

"""
Specifies how to filter by filename
"""
input UploadFilenameFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter
}

input UploadFilter {
  type: TypeFilter
  inUse: InUseFilter
  resolution: ResolutionFilter
  size: UploadSizeFilter
  tags: UploadTagsFilter
  smartTags: UploadTagsFilter
  colors: UploadColorsFilter
  orientation: OrientationFilter
  id: UploadIdFilter
  mimeType: UploadMimeTypeFilter
  format: UploadFormatFilter
  height: UploadHeightFilter
  width: UploadWidthFilter
  alt: UploadAltFilter
  title: UploadTitleFilter
  notes: UploadNotesFilter
  md5: UploadMd5Filter
  author: UploadAuthorFilter
  copyright: UploadCopyrightFilter
  basename: UploadBasenameFilter
  filename: UploadFilenameFilter
  _createdAt: UploadCreatedAtFilter
  _updatedAt: UploadUpdatedAtFilter
  OR: [UploadFilter]
  AND: [UploadFilter]
}

"""
Specifies how to filter by format
"""
input UploadFormatFilter {
  """
  Search the asset with the specified format
  """
  eq: String

  """
  Exclude the asset with the specified format
  """
  neq: String

  """
  Search assets with the specified formats
  """
  in: [String]

  """
  Search assets that do not have the specified formats
  """
  notIn: [String]
}

"""
Specifies how to filter by height
"""
input UploadHeightFilter {
  """
  Search all assets larger than the specified height
  """
  gt: IntType

  """
  Search all assets smaller than the specified height
  """
  lt: IntType

  """
  Search all assets larger or equal to the specified height
  """
  gte: IntType

  """
  Search all assets larger or equal to the specified height
  """
  lte: IntType

  """
  Search assets with the specified height
  """
  eq: IntType

  """
  Search assets that do not have the specified height
  """
  neq: IntType
}

scalar UploadId

"""
Specifies how to filter by ID
"""
input UploadIdFilter {
  """
  Search the asset with the specified ID
  """
  eq: UploadId

  """
  Exclude the asset with the specified ID
  """
  neq: UploadId

  """
  Search assets with the specified IDs
  """
  in: [UploadId]

  """
  Search assets that do not have the specified IDs
  """
  notIn: [UploadId]
}

"""
Specifies how to filter by MD5
"""
input UploadMd5Filter {
  """
  Search the asset with the specified MD5
  """
  eq: String

  """
  Exclude the asset with the specified MD5
  """
  neq: String

  """
  Search assets with the specified MD5s
  """
  in: [String]

  """
  Search assets that do not have the specified MD5s
  """
  notIn: [String]
}

"""
Specifies how to filter by mime type
"""
input UploadMimeTypeFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Search the asset with the specified mime type
  """
  eq: String

  """
  Exclude the asset with the specified mime type
  """
  neq: String

  """
  Search assets with the specified mime types
  """
  in: [String]

  """
  Search assets that do not have the specified mime types
  """
  notIn: [String]
}

"""
Specifies how to filter by notes
"""
input UploadNotesFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Filter records with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

enum UploadOrderBy {
  _createdAt_ASC
  _createdAt_DESC
  size_ASC
  size_DESC
  resolution_ASC
  resolution_DESC
  filename_ASC
  filename_DESC
  basename_ASC
  basename_DESC
  mimeType_ASC
  mimeType_DESC
  format_ASC
  format_DESC
  _updatedAt_ASC
  _updatedAt_DESC
  id_ASC
  id_DESC
}

enum UploadOrientation {
  landscape
  portrait
  square
}

"""
Specifies how to filter by size
"""
input UploadSizeFilter {
  """
  Search all assets larger than the specified size (in bytes)
  """
  gt: IntType

  """
  Search all assets smaller than the specified size (in bytes)
  """
  lt: IntType

  """
  Search all assets larger or equal to the specified size (in bytes)
  """
  gte: IntType

  """
  Search all assets larger or equal to the specified size (in bytes)
  """
  lte: IntType

  """
  Search assets with the specified size (in bytes)
  """
  eq: IntType

  """
  Search assets that do not have the specified size (in bytes)
  """
  neq: IntType
}

"""
Specifies how to filter by tags
"""
input UploadTagsFilter {
  """
  Filter uploads linked to the specified tag
  """
  contains: String

  """
  Filter uploads linked to all of the specified tags
  """
  allIn: [String!]

  """
  Filter uploads linked to at least one of the specified tags
  """
  anyIn: [String!]

  """
  Filter uploads not linked to any of the specified tags
  """
  notIn: [String!]

  """
  Search for uploads with an exact match
  """
  eq: [String!]
}

"""
Specifies how to filter by default title
"""
input UploadTitleFilter {
  """
  Filter uploads based on a regular expression
  """
  matches: StringMatchesFilter

  """
  Exclude uploads based on a regular expression
  """
  notMatches: StringMatchesFilter

  """
  Search the asset with the specified title
  """
  eq: String

  """
  Exclude the asset with the specified title
  """
  neq: String

  """
  Search assets with the specified as default title
  """
  in: [String]

  """
  Search assets that do not have the specified as default title
  """
  notIn: [String]

  """
  Filter assets with the specified field defined (i.e. with any value) or not
  """
  exists: BooleanType
}

enum UploadType {
  image
  audio
  video
  richtext
  presentation
  spreadsheet
  pdfdocument
  archive
}

"""
Specifies how to filter by update datetime
"""
input UploadUpdatedAtFilter {
  """
  Search for uploads with an exact match
  """
  eq: DateTime

  """
  Exclude uploads with an exact match
  """
  neq: DateTime

  """
  Filter uploads with a value that's less than the one specified
  """
  lt: DateTime

  """
  Filter uploads with a value that's less or equal than the one specified
  """
  lte: DateTime

  """
  Filter uploads with a value that's strictly greater than the one specified
  """
  gt: DateTime

  """
  Filter uploads with a value that's greater than or equal to the one specified
  """
  gte: DateTime
}

type UploadVideoField {
  duration: Int
  framerate: Int
  mp4Url(
    """
    Pick highest resolution available up to the specified argument
    """
    res: VideoMp4Res

    """
    Pick the exact resolution quality specified in the argument
    """
    exactRes: VideoMp4Res
  ): String
  muxAssetId: String!
  muxPlaybackId: String!
  streamingUrl: String!
  thumbnailUrl(
    """
    The file extension of the requested image format. Either png, jpg or gif
    """
    format: MuxThumbnailFormatType = jpg
  ): String!
}

"""
Specifies how to filter by width
"""
input UploadWidthFilter {
  """
  Search all assets larger than the specified width
  """
  gt: IntType

  """
  Search all assets smaller than the specified width
  """
  lt: IntType

  """
  Search all assets larger or equal to the specified width
  """
  gte: IntType

  """
  Search all assets larger or equal to the specified width
  """
  lte: IntType

  """
  Search assets with the specified width
  """
  eq: IntType

  """
  Search assets that do not have the specified width
  """
  neq: IntType
}

"""
columns and relationships of "users"
"""
type users {
  id: uuid!
  name: String
  rocket: String
  timestamp: timestamptz!
  twitter: String
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
  rocket: String_comparison_exp
  timestamp: timestamptz_comparison_exp
  twitter: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  unique
  or
  primary
  key
  constraint
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  id: uuid
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
aggregate max on columns
"""
type users_max_fields {
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  name: order_by
  rocket: order_by
  timestamp: order_by
  twitter: order_by
}

"""
aggregate min on columns
"""
type users_min_fields {
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  name: order_by
  rocket: order_by
  timestamp: order_by
  twitter: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!

  """
  data of the affected rows by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  id: order_by
  name: order_by
  rocket: order_by
  timestamp: order_by
  twitter: order_by
}

"""
select columns of table "users"
"""
enum users_select_column {
  column
  name
  id
  rocket
  timestamp
  twitter
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: uuid
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  column
  name
  id
  rocket
  timestamp
  twitter
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

type VideoField {
  height: IntType!
  provider: String!
  providerUid: String!
  thumbnailUrl: String!
  title: String!
  url: String!
  width: IntType!
}

enum VideoMp4Res {
  low
  medium
  high
}

"""
Block of type Video (video)
"""
type VideoRecord implements RecordInterface {
  _createdAt: DateTime!

  """
  Editing URL
  """
  _editingUrl: String
  _firstPublishedAt: DateTime
  _isValid: BooleanType!
  _modelApiKey: String!
  _publicationScheduledAt: DateTime
  _publishedAt: DateTime

  """
  SEO meta tags
  """
  _seoMetaTags(
    """
    The locale to use to fetch the field's content
    """
    locale: SiteLocale
  ): [Tag!]!
  _status: ItemStatus!
  _unpublishingScheduledAt: DateTime
  _updatedAt: DateTime!
  id: ItemId!
  media: VideoField!
  thumbnail: MediaItemRecord
  title: String!
}

type Volume {
  cubic_feet: Int
  cubic_meters: Int
}
